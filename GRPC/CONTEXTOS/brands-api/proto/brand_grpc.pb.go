// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/brand.proto

package brandpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrandService_GetAllBrands_FullMethodName = "/proto.BrandService/GetAllBrands"
	BrandService_GetBrandByID_FullMethodName = "/proto.BrandService/GetBrandByID"
)

// BrandServiceClient is the client API for BrandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrandServiceClient interface {
	GetAllBrands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BrandList, error)
	GetBrandByID(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Brand, error)
}

type brandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrandServiceClient(cc grpc.ClientConnInterface) BrandServiceClient {
	return &brandServiceClient{cc}
}

func (c *brandServiceClient) GetAllBrands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BrandList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrandList)
	err := c.cc.Invoke(ctx, BrandService_GetAllBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandServiceClient) GetBrandByID(ctx context.Context, in *BrandRequest, opts ...grpc.CallOption) (*Brand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Brand)
	err := c.cc.Invoke(ctx, BrandService_GetBrandByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrandServiceServer is the server API for BrandService service.
// All implementations must embed UnimplementedBrandServiceServer
// for forward compatibility.
type BrandServiceServer interface {
	GetAllBrands(context.Context, *Empty) (*BrandList, error)
	GetBrandByID(context.Context, *BrandRequest) (*Brand, error)
	mustEmbedUnimplementedBrandServiceServer()
}

// UnimplementedBrandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrandServiceServer struct{}

func (UnimplementedBrandServiceServer) GetAllBrands(context.Context, *Empty) (*BrandList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBrands not implemented")
}
func (UnimplementedBrandServiceServer) GetBrandByID(context.Context, *BrandRequest) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandByID not implemented")
}
func (UnimplementedBrandServiceServer) mustEmbedUnimplementedBrandServiceServer() {}
func (UnimplementedBrandServiceServer) testEmbeddedByValue()                      {}

// UnsafeBrandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrandServiceServer will
// result in compilation errors.
type UnsafeBrandServiceServer interface {
	mustEmbedUnimplementedBrandServiceServer()
}

func RegisterBrandServiceServer(s grpc.ServiceRegistrar, srv BrandServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrandService_ServiceDesc, srv)
}

func _BrandService_GetAllBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).GetAllBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_GetAllBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).GetAllBrands(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrandService_GetBrandByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrandServiceServer).GetBrandByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrandService_GetBrandByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrandServiceServer).GetBrandByID(ctx, req.(*BrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrandService_ServiceDesc is the grpc.ServiceDesc for BrandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BrandService",
	HandlerType: (*BrandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBrands",
			Handler:    _BrandService_GetAllBrands_Handler,
		},
		{
			MethodName: "GetBrandByID",
			Handler:    _BrandService_GetBrandByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/brand.proto",
}
